# z
#. `brew --prefix`/etc/profile.d/z.sh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(gitfast zsh-syntax-highlighting vi-mode)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export PATH="/usr/local/opt/curl/bin:$PATH"
# export NVM_DIR="$HOME/.nvm"
# . "$(brew --prefix nvm)/nvm.sh"

# fzf (https://github.com/junegunn/fzf)
# --------------------------------------------------------------------

csi() {
  echo -en "\x1b[$*"
}

fzf-down() {
  fzf --height 50% "$@" --border
}

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
[ -n "$NVIM_LISTEN_ADDRESS" ] && export FZF_DEFAULT_OPTS='--no-height'

if [ -x ~/.vim/bundle/fzf.vim/bin/preview.rb ]; then
  export FZF_CTRL_T_OPTS="--preview '~/.vim/bundle/fzf.vim/bin/preview.rb {} | head -200'"
fi

export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"

command -v blsd > /dev/null && export FZF_ALT_C_COMMAND='blsd $dir'
command -v tree > /dev/null && export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# Figlet font selector => copy to clipboard
# fgl() (
#   [ $# -eq 0 ] && return
#   cd /usr/local/Cellar/figlet/*/share/figlet/fonts
#   local font=$(ls *.flf | sort | fzf --no-multi --reverse --preview "figlet -f {} $@") &&
#   figlet -f "$font" "$@" | pbcopy
# )

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# ftags - search ctags
# ftags() {
#   local line
#   [ -e tags ] &&
#   line=$(
#     awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
#     cut -c1-$COLUMNS | fzf --nth=2 --tiebreak=begin
#   ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
#                                       -c "silent tag $(cut -f2 <<< "$line")"
# }

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local file
  file=$(fzf-tmux --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  IFS=$'\n' read -d '' -r -a out < <(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
  key=${out[0]}
  file=${out[1]}
  if [ -n "$file" ]; then
    if [ "$key" = ctrl-o ]; then
      open "$file"
    else
      ${EDITOR:-vim} "$file"
    fi
  fi
}

# if [ -n "$TMUX_PANE" ]; then
#   # https://github.com/wellle/tmux-complete.vim
#   fzf_tmux_words() {
#     tmuxwords.rb --all --scroll 500 --min 5 | fzf-down --multi | paste -sd" " -
#   }
#
#   # ftpane - switch pane (@george-b)
#   ftpane() {
#     local panes current_window current_pane target target_window target_pane
#     panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
#     current_pane=$(tmux display-message -p '#I:#P')
#     current_window=$(tmux display-message -p '#I')
#
#     target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return
#
#     target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
#     target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)
#
#     if [[ $current_window -eq $target_window ]]; then
#       tmux select-pane -t ${target_window}.${target_pane}
#     else
#       tmux select-pane -t ${target_window}.${target_pane} &&
#       tmux select-window -t $target_window
#     fi
#   }
#
#   # Bind CTRL-X-CTRL-T to tmuxwords.sh
#   #bind '"\C-x\C-t": "$(fzf_tmux_words)\e\C-e\er"'
#
# elif [ -d ~/github/iTerm2-Color-Schemes/ ]; then
#   ftheme() {
#     local base
#     base=~/github/iTerm2-Color-Schemes
#     $base/tools/preview.rb "$(
#       ls {$base/schemes,~/.vim/plugged/seoul256.vim/iterm2}/*.itermcolors | fzf)"
#   }
# fi

# Switch tmux-sessions
# fs() {
#   local session
#   session=$(tmux list-sessions -F "#{session_name}" | \
#     fzf --height 40% --reverse --query="$1" --select-1 --exit-0) &&
#   tmux switch-client -t "$session"
# }

# Z integration
# source "$BASE/z.sh"
#unalias z 2> /dev/null
#z() {
#  [ $# -gt 0 ] && _z "$*" && return
#  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
#}
#
# v - open files in ~/.viminfo
#v() {
#  local files
#  files=$(grep '^>' ~/.viminfo | cut -c3- |
#          while read line; do
#            [ -f "${line/\~/$HOME}" ] && echo "$line"
#          done | fzf -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#}

# c - browse chrome history
# c() {
#   local cols sep
#   export cols=$(( COLUMNS / 3 ))
#   export sep='{::}'
#
#   cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
#   sqlite3 -separator $sep /tmp/h \
#     "select title, url from urls order by last_visit_time desc" |
#   ruby -ne '
#     cols = ENV["cols"].to_i
#     title, url = $_.split(ENV["sep"])
#     len = 0
#     puts "\x1b[36m" + title.each_char.take_while { |e|
#       if len < cols
#         len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
#       end
#     }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
#   fzf --ansi --multi --no-hscroll --tiebreak=index |
#   sed 's#.*\(https*://\)#\1#' | xargs open
# }

# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -200'
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

[[ -s "$HOME/.profile" ]] && source "$HOME/.profile" # Load the default .profile

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



# macvim
export PATH="/usr/local/bin:$PATH"

# tmuxifier
export PATH="$HOME/.tmuxifier/bin:$PATH"

#fzf
set rtp+=/usr/local/opt/fzf

#let g:move_key_modifier = 'C'

eval "$(direnv hook zsh)"
